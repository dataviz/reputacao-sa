- content_for :navigation do
  a.toggle-menu[href='#']
    | ≡
  ul
    - @nav_links.each do |link|
      li
        a[href="#{link[:url]}"]
          = link[:name]

= render 'shared/header'
section.ranking.first
  .wrapper
    .section-info
      h1#informacoes-gerais
        | Informações gerais
    .content.ranking-content
      .company-info-box
        p
          strong
            | Empresa
          br
          span.company-name
            = @company[:name]
        p
          strong
            | Descrição
          br
          span.description
            = @company[:descricao]
      br
      .ranking
        p
          | Total de reclamações
          br
          small
            | (2009–2011)
          strong.big-number
            = @complaints.count
      .ranking
        p
          | Reclamações por mês
          br
          small
            | (média)
          strong.big-number
            = @complaints.count / 36
      - solved_unsolved_ratio = ( @solved.count.to_f/ (@solved.count.to_f + @unsolved.count.to_f)).round(2)
      .ranking.solved-unsolved-ratio[class="#{solved_unsolved_ratio > 0.5 ? 'good' : 'bad'}"]
        p
          | Proporção de solucionamentos
          br
          small
            | atendimentos × não-atendimentos
          strong.big-number
            = solved_unsolved_ratio
            small
              | (<span class='solved'>#{@solved.count}</span>:<span class='unsolved'>#{@unsolved.count}</span>)

section.time-matrices
  .wrapper
    .section-info
      h1#ocorrencias-por-mes
        | Ocorrências por mês
        br
        small
          | Média mensal entre 2009–2011
    .content.time-matrices-content
      table.matrix
        tr
          th
            | Mês
          th
            | Média
          th
            | Média de reclamações (total)
        - months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
        - max_complaints_month = @complaints_by_fulfillment.values.map { |x, y| x.values.map { |y| y["count"] }.inject(:+) }.max.to_i
        - slice = (max_complaints_month/@number_of_slices.to_f).ceil
        - months.each_with_index do |month, month_index|
          tr
            td
              = month
            - complaints = @complaints_by_fulfillment[month_index + 1].values
            - complaints_count = complaints.sum { |c| c["count"] || 0 }
            - css_category = if complaints_count.zero? then 0 else 1 + complaints_count/slice end
            - css_category = complaints_count/slice if complaints_count == max_complaints_month
            - css_class = "size-#{css_category.floor}"
            td
              span.point[class=css_class]
                | ●
            td
              | #{(complaints_count / 3).to_i} 
              small
                | (#{(complaints_count).to_i})

section.histogram
  .wrapper
    .section-info
      h1#historico-detalhado
        | Histórico detalhado
    .content.histogram-content
      table.histogram-view
        tr
          - 72.times do
            td.bar-wrapper
              .bar[style="height: #{(rand*80).to_i}px"]
        tr
          - [2006,2007,2008,2009,2010,2011].each_with_index do |y, index|
            th[colspan=12]
              = y

section.solved-unsolved
  .wrapper
    .section-info
      h1#solucionados-nao-solucionados
        | Solucionados × não solucionados
        br
        small
          | (média por mês)
    .content.solved-unsolved-content
      table.solved-unsolved-matrix
        - months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
        - months.each_with_index do |month, month_index|
          tr
            td[width=1]
              = month
            - complaints = @complaints_by_fulfillment[month_index + 1].values
            - fulfilled = complaints.sum { |c| c['fulfilled'] }
            - count = complaints.sum { |c| c['count'] }
            - solved = ((fulfilled * 100.0) / count).round
            - unsolved = 100 - solved
            td[title="#{solved}% solucionados"]
              .solved-complaints.complaints[style="width:#{solved}%"]
                span.percentage
                  | #{solved}%
              .unsolved-complaints.complaints[style="width:#{unsolved}%"]
                span.percentage
                  | #{unsolved}%

section.top-types
  .wrapper
    .section-info
      h1#reclamacoes-mais-frequentes
        small
          | Tipo de reclamação:
        br
        | Reclamações mais frequentes
    .content.top-types-content
      ul
        - @max = @complaints_by_type.keys.first.to_i
        - @complaints_by_type.keys[0..9].each do |count|
          li
            .meter[style="width: #{ (count).to_i * 100 / (@max).to_i }%;"]
              span.big-number
                = count
            p
              small
                = @complaints_by_type[count].first.DescricaoProblema

section.nao-solucionados
  .wrapper
    .section-info
      h1#nao-solucionados-mais-frequentes
        small
          | Tipo de reclamação:
        br
        | Não solucionados mais frequentes
    .content.unsolved-content
      ul
        - @max_unsolved = @unsolved_by_type.keys.first.to_i
        - @unsolved_by_type.keys[0..9].each do |count|
          li
            .meter[style="width: #{ (count).to_i * 100 / (@max_unsolved).to_i}%"]
              span.big-number
                = count
            p
              small
                = @unsolved_by_type[count].first.DescricaoProblema

section.solucionados
  .wrapper
    .section-info
      h1#solucionados-mais-frequentes
        small
          | Tipo de reclamação:
        br
        | Solucionados mais frequentes
    .content.solved-content
      ul
        - @max_solved = @solved_by_type.keys.first.to_i
        - @solved_by_type.keys[0..9].each do |count|
          li
            .meter[style="width: #{ (count).to_i * 100 / (@max_solved).to_i}%"]
              span.big-number
                = count
            p
              small
                = @solved_by_type[count].first.DescricaoProblema

section.choropleth-map
  .wrapper
    .section-info
      h1#por-estados
        | Reclamações por estado
    .content.choropleth-map-content
      ul.statelybrazil
        - slice = (@max_complaints_count/@number_of_slices.to_f).ceil
        - @regions.each_pair do |uf, region|
          - complaints_count = @states.fetch(uf, []).length
          - css_category = if complaints_count.zero? then 0 else 1 + complaints_count/slice end
          - css_category = complaints_count/slice if complaints_count == @max_complaints_count
          - css_class = "color-#{css_category}"
          li[data-state-acronym=uf
            class="statelybrazil-state-#{uf} statelybrazil-state #{css_class}"
            data-state-name=region.first
            data-state-complaints=complaints_count]
            | #{region.last}
      ul.state-list
        - sorted_states = @states.map { |uf, values| [uf, values.length] }.sort_by { |uf, values| values * -1 }
        - sorted_states.each do |uf, count|
          li
            h3
              span.big-number
                = count
              = @regions[uf].first

section.share-social.last
  .wrapper
    .section-info
      h1#compartilhar
        | Compartilhar
    .content.share-social-content
      = render 'shared/social'
= render 'shared/footer'
