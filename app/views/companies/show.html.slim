- content_for :navigation do
  a.toggle-menu[href='#']
    | ≡
  ul
    - @nav_links.each do |link|
      li
        a[href="#{link[:url]}"]
          = link[:name]

= render 'shared/header'
section.ranking
  .wrapper
    .section-info.first
      strong
        | Empresa:
      br
      h1#ranking
        = @company[:name]
      /! incluir informações da empresa pela wikipedia?
      p.description
        strong
          | Descrição
        br
        = @company[:descricao]
    .content.ranking-content
      .ranking
        p
          | Total de reclamações
          strong.big-number
            = @complaints.count
      .ranking
        /! ❤ Média de reclamações mensais
        p
          | Reclamações por mês (média)
          strong.big-number
            = @complaints.count / 36
      .ranking
        /! Atendimentos / Não atendimentos
        p
          | Proporção Atendimentos/Não-atendimentos
          strong.big-number
            = ( @solved.count.to_f/ (@solved.count.to_f + @unsolved.count.to_f)).round(2)
            small
              =  "(#{@solved.count}:#{@unsolved.count})"
      .ranking
        /! Repetir esse efeito nos outros
        p
          | Ranking global
          strong.big-number
            =  (top_companies.select{|tc| tc[:name].upcase == @company[:name] }.first || {})[:position]
            small
              | /3400

/! Can also be http://bl.ocks.org/mbostock/4063318
/! OU ESSE » http://mbostock.github.com/d3/talk/20111116/iris-splom.html
section.time-matrices
  .wrapper
    .section-info
      h1#por-tempo
        | Média de ocorrências por mês
    .content.time-matrices-content
      table.matrix
        - months = ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
        - months.each_with_index do |month, month_index|
          tr
            td
              = month
            - complaints = @complaints_by_fulfillment[month_index + 1].values
            - x = complaints.sum { |c| c["count"] || 0 }
            td[title=x]
              span.point[style="font-size:#{(x*0.5).to_i}px;"] ●

section.solved-unsolved
  .wrapper
    .section-info
      h2#atendimentos-nao-atendimentos
        | Média de atendimentos solucionados e não solucionados por mês
    .content.solved-unsolved-content
      table.solved-unsolved-matrix
        - months = ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
        - months.each_with_index do |month, month_index|
          tr
            td[width=1]
              = month
            - complaints = @complaints_by_fulfillment[month_index + 1].values
            - fulfilled = complaints.sum { |c| c['fulfilled'] }
            - count = complaints.sum { |c| c['count'] }
            - solved = ((fulfilled * 100.0) / count).round
            - unsolved = 100 - solved
            td[title="#{solved}% solucionados"]
              .solved-complaints.complaints[style="width:#{solved}%"]
              .unsolved-complaints.complaints[style="width:#{unsolved}%"]
//
  table.matrix
    tr
      th
        | Mês\Ano
      th[colspan=2]
        | 2009
      th[colspan=2]
        | 2010
      th[colspan=2]
        | 2011
    - months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
    - months.each do |month|
      tr
        td
          = month
        - 3.times do
          ruby:
            yes = 100 - (rand * 100).to_i
            no  = 100 - yes
          td.nopad[title="Sim: #{yes}"]
            p.yes
              span.point[style="font-size: #{(yes*0.5).to_i}px;"] ●
          td.nopad[title="Não: #{no}"]
            p.no
              span.point[style="font-size: #{(no*0.5).to_i}px;"] ●

section.top-types
  .wrapper
    .section-info
      h2#top-10
        | Top 10: Tipos de reclamação mais frequentes
      .context
        a[href='#']
          | Todos os anos
        a[href='#']
          | 2009
        a[href='#']
          | 2010
        a[href='#']
          | 2011
    .content.top-types-content
      table
        // #REFACTOR LOG?
        - @max = @complaints_by_type.keys.first.to_i
        /! animate bar to 50% from left to right
        /! fade number
        /! when scrolling reaches the UL element
        - @complaints_by_type.keys[0..9].each do |count|
          tr
            td
              p
                span.big-number
                  = count
            td[width='75%']
              .meter[style="width: #{ (count).to_i * 100 / (@max).to_i }%;"]
          tr
            td[colspan=2]
              p
                small
                  = @complaints_by_type[count].first.DescricaoProblema

section.nao-atendidos
  .wrapper
    .section-info
      h2#atendimentos
        | Tipos mais frequentes de problemas não-atendidos
    .content.nao-atendidos-content
      /! bubble chart » http://en.wikipedia.org/wiki/Bubble_chart
      /! http://bl.ocks.org/mbostock/4063269
      /! AWESOME: http://bost.ocks.org/mike/miserables/
      ul
        - @unsolved_by_type.keys[0..9].each do |count|
          li
            strong.big-number = count
            = @unsolved_by_type[count].first.DescricaoProblema

section.atendidos
  .wrapper
    .section-info
      h2
        | Tipos mais frequentes de problemas atendidos
    .content.atendidos-content
      /! bubble chart » http://en.wikipedia.org/wiki/Bubble_chart
      /! http://bl.ocks.org/mbostock/4063269
      ul
        - @solved_by_type.keys[0..9].each do |count|
          li
            strong.big-number = count
            = @solved_by_type[count].first.DescricaoProblema


section.choropleth-map
  .wrapper
    .section-info
      h1#mapa
        | Reclamações por estado
    .content.choropleth-map-content
      ul.statelybrazil
        - @regions.each_pair do |uf, region|
          - complaints_count = @states.fetch(uf, []).length
          - css_category = if complaints_count.zero? then 0 else 1 + complaints_count/@slice end
          - css_category = complaints_count/@slice if complaints_count == @max_complaints_count
          - css_class = "color-#{css_category}"
          li[data-state-acronym=uf
            class="statelybrazil-state-#{uf} statelybrazil-state #{css_class}"
            data-state-name=region.first
            data-state-complaints=complaints_count]
            | #{region.last}
      ul.state-list
        - @regions.each_pair do |uf, region|
          - complaints_count = @states.fetch(uf, []).length
          li
            h3
              span.big-number
                = complaints_count
              = region.first

section.statistics
  .wrapper
    .section-info
      h1#estatisticas
        | Estatísticas gerais
      p
        | Tempo de resolução de atendimentos [abertura ao fechamento] // Sem ideia do que exibir
    .content.statistics-wrapper
      h2
        | Média de tempo para atendimento geral
      h2
        | Média de tempo para atendimento por estado
      h2
        | Média de tempo para atendimento por região
      h2
        | Média de reclamações por sexo e idade
      pre
        | Paired Bar chart

//
  section.social-trends
    .wrapper
      .section-info
        h1#redes-sociais
          | Tendências na rede
        p
          | Exibir o que as pessoas falam da empresa nas redes sociais.
  section.twitter-trends
    .wrapper
      .section-info
        h2
          | O que estão falando da #empresa no Twitter
  section.google-plus-trends
    .wrapper
      .section-info
        h2
          | O que estão falando da #empresa no GooglePlus
  section.comments
    .wrapper
      .section-info
        h1#comentarios
          | Comentários
      .content.comments-wrapper
        h2
          | Decidir por Disqus ou Facebook
section.share-social
  .wrapper
    .section-info
      h2
        | Compartilhar
    .content.share-social-content
      = render 'shared/social'
= render 'shared/footer'
